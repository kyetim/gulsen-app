// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Album {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  category    String   @default("GENEL")
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TravelPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String
  status      String
  budget      Float?
  notes       String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  venue       String
  city        String
  address     String
  startDate   DateTime
  endDate     DateTime
  imageUrl    String?
  ticketUrl   String?
  price       Float?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userEvents  UserEvent[]
}

model User {
    id        String      @id @default(cuid())
    email     String      @unique
    name      String?
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    events    UserEvent[]
}

model UserEvent {
    id        String   @id @default(cuid())
    eventId   String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    event     Event    @relation(fields: [eventId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}

model DiaryEntry {
    id        String   @id @default(cuid())
    title     String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Poem {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
